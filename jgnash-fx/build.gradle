plugins {
    id 'application'
    id "org.openjfx.javafxplugin"
    id 'org.beryx.jlink' version '2.15.1'
    id 'org.javamodularity.moduleplugin'    version "1.5.0"
}

description = "jGnash JavaFx"

application {
    mainClassName = "$moduleName/jgnash.app.jGnashFx"
    applicationName = 'jGnashFx'
}


dependencies {
    //compile project(":jgnash-manual")
    compile project(":jgnash-core")
    compile project(":jgnash-convert")
    compile project(":jgnash-report-core")
    compile project(":jgnash-plugin")

    compile group: "info.picocli", name: "picocli", version: picocliVersion
    
    // required of Unit testing JavaFX
    testCompile group: 'org.testfx', name: 'testfx-junit5', version: '4.0.15-alpha'
    testCompile group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-12.0.1+2'
}

javafx {
    version = javaFXVersion
    modules = ["javafx.base", "javafx.controls", "javafx.fxml", "javafx.web", "javafx.swing", "javafx.graphics", "javafx.media"]
}

startScripts.enabled = false

// build the mt940 plugin prior to creating the zip file without creating a circular loop
distZip.dependsOn(":mt940:build")

distZip {
    into("jGnash-$version") {
        from "."
        include "scripts/*"
    }

    into("jGnash-$version") {
        from "../mt940/build/libs"
        include "*"
        into "jGnash-$version/plugins"
    }

    doLast {
        file("$destinationDir/$archiveName").renameTo("$destinationDir/"+"jGnashFx-"+version+".zip")
    }
}

jar {
    // Keep jar clean:
    exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/*.MF"

    manifest {
        attributes "Main-Class": "jGnashFx",
                "Class-Path": configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(" ")
    }
}

jlink {
    addExtraDependencies("javafx")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = applicationName
        jvmArgs = []
    }
    mergedModule {
        requires 'java.logging'

        requires 'javafx.controls'
        requires 'javafx.fxml'
        requires 'javafx.web'
        requires 'javafx.swing'
        requires 'javafx.graphics'
        requires 'javafx.media'
    }
    jpackage {
        // See https://badass-jlink-plugin.beryx.org/releases/latest/#_jpackage for
        // where the plugin's jpackage task finds the path to the jpackage tool by default
        // (Currently you need to manually install a OpenJDK 14 Early Access Build including jpackage)
        jpackageHome = System.getenv('BADASS_JLINK_JPACKAGE_HOME')
        skipInstaller = false
        identifier = applicationName
    }
}

